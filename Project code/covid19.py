# -*- coding: utf-8 -*-
"""covid19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PJ0sU4UcZvX6sN6tIKxIxmNn_3jHtvKu
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip /content/drive/MyDrive/COVID-19_Radiography_Dataset.zip

import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten
import cv2
import glob
from matplotlib.colors import LogNorm
from keras.optimizers import Adam
from keras import layers
from sklearn.model_selection import train_test_split

x = []
y = []
label_covid = '1'
label_normal = '0'
for img in glob.glob("/content/COVID-19_Radiography_Dataset/COVID/images_covid/*.png"):
    n= cv2.imread(img)
    n = cv2.resize(n, (128, 128))
    x.append(n)
    y.append(label_covid)
    
for img in glob.glob("/content/COVID-19_Radiography_Dataset/Normal/images_normal/*.png"):
    n=cv2.imread(img)
    n = cv2.resize(n, (128, 128))
    x.append(n)
    y.append(label_normal)

x = np.array(x, dtype=np.float32)
y = np.array(y, dtype=np.int32)
x = x.astype('float32')/255
print(x.shape)
print(y.shape)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)
x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size = 0.1, random_state = 42)
print(x_train.shape, x_test.shape, x_val.shape, y_train.shape, y_test.shape, y_val.shape)

model = Sequential([
    Conv2D(32, 3, activation='relu', padding='same', input_shape=(128,128,3)),
    MaxPooling2D(2, padding='same'),
    Dropout(0.3),

    Conv2D(32, 3, activation='relu', padding='same'),
    MaxPooling2D(2, padding='same'),
    Dropout(0.5),

    Conv2D(64, 3, activation='relu', padding='same'),
    MaxPooling2D(2, padding='same'),
    Dropout(0.2),

    Flatten(),
    Dense(64, activation='relu'),
    Dense(2, activation='softmax')

])
model.compile(optimizer = 'adam', loss = 'SparseCategoricalCrossentropy', metrics = ['accuracy'])
model.summary()

history = model.fit(x_train, y_train, epochs = 15, batch_size = 128,  validation_data = (x_val, y_val))

c = 0
for i in range(len(y_test)):
    a = np.expand_dims(x_test[i],axis=0)
    pred = model.predict(a)
    result = 0
    if (pred[0,0]<pred[0,1]):
      result = 1
    if result==y_test[i]:
      c = c+1

print(c/len(y_test))

from matplotlib import pyplot
pyplot.subplot(211)
pyplot.title('Loss')
pyplot.plot(history.history['loss'], label='train')
pyplot.plot(history.history['val_loss'], label='test')
pyplot.legend()
#plot accuracy during training
pyplot.subplot(212)
pyplot.title('Accuracy')
pyplot.plot(history.history['accuracy'], label='train')
pyplot.plot(history.history['val_accuracy'], label='test')
pyplot.legend()
pyplot.show()